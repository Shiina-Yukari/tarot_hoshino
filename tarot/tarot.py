from random import shuffle, randint
import random
import os

from aiocqhttp.message import Message
from hoshino import util, R
from hoshino import Service
from hoshino.config import NICKNAME

if type(NICKNAME)!=list:
    NICKNAME=[NICKNAME]

cards = {
    "c_1": ["圣杯1", "家庭生活之幸福，别的牌可给予其更多内涵，如宾客来访、宴席、吵架（带来正面影响）", "家庭生活之幸福，别的牌可给予其更多内涵，如宾客来访、宴席、吵架（带来负面影响）"],
    "c_10": ["圣杯10", "家庭幸福，预料之外的好消息（带来正面影响）", "家庭幸福，预料之外的好消息（带来负面影响）"],
    "c_2": ["圣杯2", "成功和好运，但细心、专心会是获取它们的必要条件（带来正面影响）", "成功和好运，但细心、专心会是获取它们的必要条件（带来负面影响）"],
    "c_3": ["圣杯3", "切忌轻率、鲁莽，它们会给事业带来厄运（带来正面影响）", "切忌轻率、鲁莽，它们会给事业带来厄运（带来负面影响）"],
    "c_4": ["圣杯4", "不易说服的人，未婚的男子或女子，婚姻推迟（带来正面影响）", "不易说服的人，未婚的男子或女子，婚姻推迟（带来负面影响）"],
    "c_5": ["圣杯5", "无根据的嫉妒，缺乏果断误了大事，且逃避责任（带来正面影响）", "无根据的嫉妒，缺乏果断误了大事，且逃避责任（带来负面影响）"],
    "c_6": ["圣杯6", "轻信，你容易被欺骗，特别是被不值得信任的同伴欺骗（带来正面影响）", "轻信，你容易被欺骗，特别是被不值得信任的同伴欺骗（带来负面影响）"],
    "c_7": ["圣杯7", "善变或食言，提防过分乐观的朋友和无主见的熟人（带来正面影响）", "善变或食言，提防过分乐观的朋友和无主见的熟人（带来负面影响）"],
    "c_8": ["圣杯8", "令人愉快的公司或友谊，聚合或有计划的庆祝活动（带来正面影响）", "令人愉快的公司或友谊，聚合或有计划的庆祝活动（带来负面影响）"],
    "c_9": ["圣杯9", "梦里与愿望实现，好运与财富（带来正面影响）", "梦里与愿望实现，好运与财富（带来负面影响）"],
    "c_11": ["圣杯侍者", "一个永远的亲密朋友，或许是分别很久的童年朋友或初恋情人（带来正面影响）", "一个永远的亲密朋友，或许是分别很久的童年朋友或初恋情人（带来负面影响）"],
    "c_14": ["圣杯国王", "诚实、善良的男子，但容易草率地做出决定，并不可依赖（带来正面影响）", "诚实、善良的男子，但容易草率地做出决定，并不可依赖（带来负面影响）"],
    "c_13": ["圣杯王后", "忠诚、钟情的女人，温柔大方，惹人怜爱（带来正面影响）", "忠诚、钟情的女人，温柔大方，惹人怜爱（带来负面影响）"],
    "c_12": ["圣杯骑士", "假朋友，来自远方陌生的人，勾引者，应当把握当前命运（带来正面影响）", "假朋友，来自远方陌生的人，勾引者，应当把握当前命运（带来负面影响）"],
    "s_1": ["宝剑1", "不幸，坏消息，充满嫉妒的情感（带来正面影响）", "不幸，坏消息，充满嫉妒的情感（带来负面影响）"],
    "s_10": ["宝剑10", "悲伤，否定好兆头（带来正面影响）", "悲伤，否定好兆头（带来负面影响）"],
    "s_2": ["宝剑2", "变化，分离（带来正面影响）", "变化，分离（带来负面影响）"],
    "s_3": ["宝剑3", "一次旅行，爱情或婚姻的不幸（带来正面影响）", "一次旅行，爱情或婚姻的不幸（带来负面影响）"],
    "s_4": ["宝剑4", "疾病，经济困难，嫉妒，各种小灾难拖延工作的进度（带来正面影响）", "疾病，经济困难，嫉妒，各种小灾难拖延工作的进度（带来负面影响）"],
    "s_5": ["宝剑5", "克服困难，获得生意成功或者和谐的伙伴（带来正面影响）", "克服困难，获得生意成功或者和谐的伙伴（带来负面影响）"],
    "s_6": ["宝剑6", "只要有坚韧不拔的毅力，就能完成计划（带来正面影响）", "只要有坚韧不拔的毅力，就能完成计划（带来负面影响）"],
    "s_7": ["宝剑7", "与朋友争吵，招来许多麻烦（带来正面影响）", "与朋友争吵，招来许多麻烦（带来负面影响）"],
    "s_8": ["宝剑8", "谨慎，看似朋友的人可能成为敌人（带来正面影响）", "谨慎，看似朋友的人可能成为敌人（带来负面影响）"],
    "s_9": ["宝剑9", "疾病、灾难、或各种不幸（带来正面影响）", "疾病、灾难、或各种不幸（带来负面影响）"],
    "s_11": ["宝剑侍者", "嫉妒或者懒惰的人，事业上的障碍，或许是骗子（带来正面影响）", "嫉妒或者懒惰的人，事业上的障碍，或许是骗子（带来负面影响）"],
    "s_14": ["宝剑国王", "野心勃勃、妄想驾驭一切（带来正面影响）", "野心勃勃、妄想驾驭一切（带来负面影响）"],
    "s_13": ["宝剑王后", "奸诈，不忠，一个寡妇或被抛弃的人（带来正面影响）", "奸诈，不忠，一个寡妇或被抛弃的人（带来负面影响）"],
    "s_12": ["宝剑骑士", "传奇中的豪爽人物，喜好奢侈放纵，但勇敢、有创业精神（带来正面影响）", "传奇中的豪爽人物，喜好奢侈放纵，但勇敢、有创业精神（带来负面影响）"],
    "w_1": ["权杖1", "财富与事业的成功，终生的朋友和宁静的心境（带来正面影响）", "财富与事业的成功，终生的朋友和宁静的心境（带来负面影响）"],
    "w_10": ["权杖10", "意想不到的好运，长途旅行，但可能会失去一个亲密的朋友（带来正面影响）", "意想不到的好运，长途旅行，但可能会失去一个亲密的朋友（带来负面影响）"],
    "w_2": ["权杖2", "失望，来自朋友或生意伙伴的反对（带来正面影响）", "失望，来自朋友或生意伙伴的反对（带来负面影响）"],
    "w_3": ["权杖3", "不止一次的婚姻（带来正面影响）", "不止一次的婚姻（带来负面影响）"],
    "w_4": ["权杖4", "谨防一个项目的失败，虚假或不可靠的朋友起到了破坏作用（带来正面影响）", "谨防一个项目的失败，虚假或不可靠的朋友起到了破坏作用（带来负面影响）"],
    "w_5": ["权杖5", "娶一个富婆（带来正面影响）", "娶一个富婆（带来负面影响）"],
    "w_6": ["权杖6", "有利可图的合伙（带来正面影响）", "有利可图的合伙（带来负面影响）"],
    "w_7": ["权杖7", "好运与幸福，但应提防某个异性（带来正面影响）", "好运与幸福，但应提防某个异性（带来负面影响）"],
    "w_8": ["权杖8", "贪婪，可能花掉不属于自己的钱（带来正面影响）", "贪婪，可能花掉不属于自己的钱（带来负面影响）"],
    "w_9": ["权杖9", "和朋友争辩，固执的争吵（带来正面影响）", "和朋友争辩，固执的争吵（带来负面影响）"],
    "w_11": ["权杖侍者", "一个诚挚但缺乏耐心的朋友，善意的奉承（带来正面影响）", "一个诚挚但缺乏耐心的朋友，善意的奉承（带来负面影响）"],
    "w_14": ["权杖国王", "一个诚挚的男人，慷慨忠实（带来正面影响）", "一个诚挚的男人，慷慨忠实（带来负面影响）"],
    "w_13": ["权杖王后", "一个亲切善良的人，但爱发脾气（带来正面影响）", "一个亲切善良的人，但爱发脾气（带来负面影响）"],
    "w_12": ["权杖骑士", "幸运地得到亲人或陌生人的帮助（带来正面影响）", "幸运地得到亲人或陌生人的帮助（带来负面影响）"],
    "p_1": ["钱币1", "重要的消息，或珍贵的礼物（带来正面影响）", "重要的消息，或珍贵的礼物（带来负面影响）"],
    "p_10": ["钱币10", "把钱作为目标，但并不一定会如愿以偿（带来正面影响）", "把钱作为目标，但并不一定会如愿以偿（带来负面影响）"],
    "p_2": ["钱币2", "热恋，但会遭到朋友反对（带来正面影响）", "热恋，但会遭到朋友反对（带来负面影响）"],
    "p_3": ["钱币3", "争吵，官司，或家庭纠纷（带来正面影响）", "争吵，官司，或家庭纠纷（带来负面影响）"],
    "p_4": ["钱币4", "不幸或秘密的背叛，来自不忠的朋友，或家庭纠纷（带来正面影响）", "不幸或秘密的背叛，来自不忠的朋友，或家庭纠纷（带来负面影响）"],
    "p_5": ["钱币5", "意外的消息，生意成功、愿望实现、或美满的婚姻（带来正面影响）", "意外的消息，生意成功、愿望实现、或美满的婚姻（带来负面影响）"],
    "p_6": ["钱币6", "早婚，但也会早早结束，第二次婚姻也无好兆头（带来正面影响）", "早婚，但也会早早结束，第二次婚姻也无好兆头（带来负面影响）"],
    "p_7": ["钱币7", "谎言，谣言，恶意的批评，运气糟透的赌徒（带来正面影响）", "谎言，谣言，恶意的批评，运气糟透的赌徒（带来负面影响）"],
    "p_8": ["钱币8", "晚年婚姻，或一次旅行，可能带来结合（带来正面影响）", "晚年婚姻，或一次旅行，可能带来结合（带来负面影响）"],
    "p_9": ["钱币9", "强烈的旅行愿望，嗜好冒险，渴望生命得到改变（带来正面影响）", "强烈的旅行愿望，嗜好冒险，渴望生命得到改变（带来负面影响）"],
    "p_11": ["钱币侍者", "一个自私、嫉妒的亲戚，或一个带来坏消息的使者（带来正面影响）", "一个自私、嫉妒的亲戚，或一个带来坏消息的使者（带来负面影响）"],
    "p_14": ["钱币国王", "一个脾气粗暴的男人，固执而充满复仇心，与他对抗会招来危险（带来正面影响）", "一个脾气粗暴的男人，固执而充满复仇心，与他对抗会招来危险（带来负面影响）"],
    "p_13": ["钱币王后", "卖弄风情的女人，乐于干涉别人的事情，诽谤和谣言（带来正面影响）", "卖弄风情的女人，乐于干涉别人的事情，诽谤和谣言（带来负面影响）"],
    "p_12": ["钱币骑士", "一个有耐心、有恒心的男人，发明家或科学家（带来正面影响）", "一个有耐心、有恒心的男人，发明家或科学家（带来负面影响）"],
    "a_0": ["愚者", "活在当下，或随遇而安，如果每天都很重试，便能回味无穷", "时机的关键所在，表示还不是时机，也代表没能把握住时机，或太固执于过去的计划，过分依赖他人的建议"],
    "a_1": ["魔术师", "富有外交手腕，但需要坚定的意志和正当的目的才能把它发挥出来。成功可以获得巨大收获；但失败的话...", "毫无意义的投机心态。漫无目的、缺乏自律，也暗示精神上的困扰。极端下意味着丧失良知和反社会"],
    "a_2": ["女教皇", "宁静、直觉、含蓄、谨慎，被动接受以得到发展", "诡异、猜疑、冷漠、迟缓，内心发展后，回到了现实生活"],
    "a_3": ["女皇", "具有魅力、优雅和毫无保留的爱，有创造力和聪明才智", "自负、矫情，无法容忍缺陷。不应过于理想化"],
    "a_4": ["皇帝", "坚强的意志和稳固的力量，通过努力和自律达到成功", "任性、暴虐和残忍，意味着由于缺乏自律而失败，高处不胜寒"],
    "a_5": ["教皇", "信心十足，不疑惑，对事情有正确的理解力，寻找新的方法，可能感到阻力，但事实会证明一切", "爱说教，唱高调以及独断，也代表新的观念形成、或拒绝流俗。为自己的人生写剧本，按自己对生命的理解而活"],
    "a_6": ["恋人", "道德、美学、更深层次的精神和肉体上的渴望，暗示一段新的关系，或已有关系的新形态，也暗示沉醉于爱河", "欲求不满、多愁善感、迟疑不决。意味着任何追求新阶段的努力都只建立于期待和梦想，也可以意味一段关系的结束"],
    "a_7": ["战车", "成功、有才能、有效率，抛开过去的束缚。如果牌阵总体结果不好，应该考虑有哪方面过于激烈", "暗示专治的态度和拙劣的方向感，可能被情绪懵逼了视线。太过多愁善感"],
    "a_8": ["力量", "代表个人魅力与追求成功的决心，象征爱与坚强的意志力，可驾驭不易控制的能量，拥有优势力量", "自满、滥权，对人生无望，害怕被热情和欲望冲昏头脑。去做自己想做的"],
    "a_9": ["隐士", "代表有所坚持，有目标、深沉且专注", "代表不易原谅他人，可能感到寂寞。如果害怕放弃某些东西，会失去成长的机会"],
    "a_10": ["命运之轮", "代表无论喜欢与否，改变终将会到来", "意味着要对抗改变可能很困难，但是成败输赢不是固定的，请迎接未来"],
    "a_11": ["正义", "正直、公平、诚实、纪律，只要对自己诚实，未来能得到改善；或代表成功解决某个争议", "暗示消极、不满的心态，代表无休止的争议或不协调。必须要找到原因，否则不和将一再出现"],
    "a_12": ["吊人", "代表有偿的牺牲，代表任性极限、解决问题、有人文特质，代表一段反省的时光、内在的平和宁静，也代表在不同角度，会有不同的感受", "代表无偿的牺牲，代表精神有所局限且缺乏远见，代表听从他人期望而不顺从自己的想法。顺从自有好处"],
    "a_13": ["死神", "代表顺从变化，放下曾经紧抓不放的事物，会得到新生；同时意味接受死亡，便会活得更充实", "意味并不相信改变会带来好结果，因此拒绝改变；代表掩饰绝望"],
    "a_14": ["节制", "代表节制，调试热情，不致过分越轨，还代表运用知识和理解力来条件行为的能力", "代表轻浮和过度追求时髦，也可代表学习和旅行"],
    "a_15": ["恶魔", "代表感官的魅力和热情的表达，接受了糟糕的状态而不愿改变", "即使肢体上受到束缚，精神仍可以翱翔，积极寻找改变的方法，放下控制欲，才能发现真正的自由"],
    "a_16": ["塔", "表示能接受挫折，勇敢克服困难，或许感到深深的痛苦与失望，但都是为了自己能有所成长", "代表得意忘形、自作自受、沉溺于虚幻的想象。无法抗拒改变，其终究会发生"],
    "a_17": ["星星", "代表着乐观与无限的希望，对自己充满信心，将迎来一段心平气和的时光", "需要心灵上的自由。适当舍弃没有价值的事物，会让你看的更清楚"],
    "a_18": ["月亮", "意味着敏感、体谅、感同身受，代表对圆满的不安，越幸福的时候，越担心不幸会到来", "代表感情上的顺从、被动和缺乏自我，面对心中的想法，才能解决问题"],
    "a_19": ["太阳", "代表着具有激情、人际和谐以及美好名声等正面的特质，意味着有创造性的事物，可以在生活中感到快乐、爱与价值", "代表骄傲、自负、虚伪等反面特征，然而，生命与世界任然支持你，它也可能暗示竞争，也许是自己与自己的竞争"],
    "a_20": ["审判", "代表具有超越自我、发觉无限潜力的特质，了解生命的相连，才能了解自己的精神意志、知道如何表达他", "代表着缺少应对忧郁的能力，而越是逃避，空虚感更加加深；试图弥补，解决之道来自内心"],
    "a_21": ["世界", "意味着报酬优厚，收获巨大", "预示巨大的障碍、涣散的精神及自怜的性格，同时也代表旅行；有人以为是成功带来了快乐，实是快乐带来了成功"],
}

meanings = {
    "二择一": {
        "第一张牌": "代表目前问卜者的状况以及问题的现况",
        "第二张牌": "代表A路线本身未来的状况",
        "第三张牌": "代表B路线本身未来的状况",
        "第四张牌": "代表选择A后问卜者未来的发展趋势",
        "第五张牌": "代表选择B后问卜者未来的发展趋势"
    },
    "四要素": {
        "火牌": "代表对问卜者行动方面的建议",
        "气牌": "代表对问卜者言语方面的建议",
        "水牌": "代表对问卜者情绪方面的建议",
        "土牌": "代表对问卜者物质方面的建议"
    },
    "六芒星": {
        "第一张牌": "代表问题过去状况",
        "第二张牌": "代表问题现在状况",
        "第三张牌": "代表问题未来状况",
        "第四张牌": "代表解决此问题的应对策略",
        "第五张牌": "代表目前的环境与周围情况",
        "第六张牌": "代表问卜者本人的态度与心态",
        "第七张牌": "代表可能会发生的结果"
    },
    "愿望展开": {
        "第一张牌": "代表问卜者想要什么",
        "第二张牌": "代表问卜者目前的处境",
        "第三张牌": "代表问卜者应该要知道的事情",
        "第四张牌": "代表问卜者应该要作的事",
        "第五张牌": "代表不久后将会发生的事情",
        "第六张牌": "代表会改变结果的事情",
        "第七张牌": "代表偶然会发生的事情",
        "第八张牌": "代表在哪里会比较容易成功",
        "第九张牌": "代表对全局的总结"
    }
}

fd = os.path.dirname(__file__)
CHAIN_REPLY = True #是否启用转发模式

sv = Service('tarot', visible= True, enable_on_default= True, bundle='塔罗牌', help_='''
塔罗牌
'''.strip())

async def send_playerInfo(bot, ev, array):
    await bot.send(ev,'请稍等，正在洗牌中')
    card_num = len(array)
    indices =random.sample(range(1,78), card_num)
    card_keys = list(cards.keys())
    shuffle(card_keys)
    chain = []
    for count in range(card_num):
        sv.logger.info(f'第{count}轮')
        index = int(indices[count])
        card_key = card_keys[index-1]
        card_name = cards[card_key][0]
        meaning_key = list(array.keys())[count]
        meaning_value = array[meaning_key]
        img_path = os.path.join(fd, "assets", f"{card_key}.jpg")
        image_file = f"file:///{img_path}"
        rand = randint(1, 2)
        if rand == 1:
            card_value = cards[card_key][1]
            card_name += "（正位）"
        else:
            card_value = cards[card_key][2]
            card_name += "（逆位）"
        if not CHAIN_REPLY:
            msg = []
            msg.extend([meaning_key,"，",meaning_value,"\n",card_name,"，",card_value,"\n",f"[CQ:image,file={image_file}]"])
            sv.logger.info(msg)
            if count < card_num-1:
                await bot.send(ev, "".join(msg), at_sender=True)
            else:
                await bot.finish(ev, "".join(msg), at_sender=True)
        else:
            msg = []
            msg.extend([meaning_key,"，",meaning_value,"\n",card_name,"，",card_value,"\n"])
            if count < card_num:
                await chain_reply(ev, chain, msg, image_file)
                # sv.logger.info(chain)
        if CHAIN_REPLY and count == card_num-1:
            await bot.send_group_forward_msg(group_id=ev['group_id'], messages=chain)


async def chain_reply(ev, chain, msg, image):
    msg = "".join(msg)
    data ={
            "type": "node",
            "data": {
                "name": str(NICKNAME[0]),
                "uin": str(ev.self_id),
                "content": [
                    {"type": "text", "data": {"text": msg}},
                    {"type": "image", "data": {"file": image}}
                    ]
                    }
        }
    chain.append(data)
    return chain


@sv.on_prefix(('塔罗牌'))
async def activator(bot, ev):
    array = ev.message.extract_plain_text().strip()
    if array in meanings.keys():
        await send_playerInfo(bot, ev, meanings[array])
